services:
  dynamodb:
    image: amazon/dynamodb-local
    container_name: dynamodb-local
    command: -jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data
    ports:
      - "8000:8000"
    volumes:
      - ./dynamodb-data:/home/dynamodblocal/data
    networks:
      - dynamo-local

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    container_name: dynamodb-admin
    environment:
      DYNAMO_ENDPOINT: http://dynamodb:8000
      AWS_REGION: local
      AWS_ACCESS_KEY_ID: fake
      AWS_SECRET_ACCESS_KEY: fake
    ports:
      - "8001:8001"
    depends_on:
      - dynamodb
    networks:
      - dynamo-local

#  mongo:
#    image: mongo:latest
#    container_name: mongo
#    restart: unless-stopped
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongo_data:/data/db
#
#  redis:
#    image: redis:latest
#    container_name: redis
#    restart: unless-stopped
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis_data:/data
#
#  minio:
#    image: quay.io/minio/minio
#    container_name: minio
#    restart: unless-stopped
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    environment:
#      MINIO_ROOT_USER: minio
#      MINIO_ROOT_PASSWORD: password
#    command: server /data --console-address ":9001"
#    volumes:
#      - minio_data:/data
#
#  postgres:
#    image: postgres:16
#    container_name: postgres
#    restart: unless-stopped
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: postgres
#    volumes:
#      - postgres_data:/var/lib/postgresql/data

volumes:
  mongo_data:
  redis_data:
  minio_data:
  postgres_data:

networks:
  dynamo-local:
    driver: bridge