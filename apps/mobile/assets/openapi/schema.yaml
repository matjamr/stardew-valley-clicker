openapi: 3.0.0
info:
  title: User, Security and Game API
  description: API for user management, security operations and game operations (assets, islands)
  version: 0.0.9
servers:
  - url: /api
paths:
  /users:
    post:
      summary: Create a new user
      operationId: saveUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUserResponse'
        '400':
          description: Invalid input
  /users/{id}:
    get:
      summary: Retrieve a user by ID
      operationId: retrieveUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUserResponse'
        '404':
          description: User not found
  /auth/login:
    post:
      summary: Authenticate a user
      operationId: loginUser
      tags:
        - security
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
        '401':
          description: Authentication failed
  /auth/verify:
    post:
      summary: Verify a user's access token
      operationId: verifyUser
      tags:
        - security
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyUserRequest'
      responses:
        '200':
          description: Token verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserResponse'
        '401':
          description: Invalid token
  /auth/refresh:
    post:
      summary: Refresh an access token
      operationId: refreshToken
      tags:
        - security
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Invalid refresh token
  
  # Game - Assets
  /assets:
    post:
      summary: Create a new asset
      operationId: createAsset
      tags:
        - assets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetRequest'
      responses:
        '200':
          description: Asset created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAssetResponse'
        '400':
          description: Invalid input
  /assets/{id}:
    get:
      summary: Read an asset by ID
      operationId: readAsset
      tags:
        - assets
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Asset found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAssetResponse'
        '404':
          description: Asset not found

  # Game - Islands
  /islands:
    post:
      summary: Create a new island
      operationId: createIsland
      tags:
        - islands
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIslandRequest'
      responses:
        '200':
          description: Island created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIslandResponse'
  /islands/{id}:
    get:
      summary: Read island by ID
      operationId: readIsland
      tags:
        - islands
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Island found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadIslandResponse'
        '404':
          description: Island not found

  # Game - Island Variants
  /island-variants:
    get:
      summary: List all island variants
      operationId: listAllIslandVariants
      tags:
        - island-variants
      responses:
        '200':
          description: Island variants retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IslandVariant'
  /island-variants/{id}:
    get:
      summary: Read island variant by ID
      operationId: readIslandVariant
      tags:
        - island-variants
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Island variant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IslandVariant'
        '404':
          description: Island variant not found

  # Game - Events
  /events:
    post:
      summary: Create a new scheduled event (trigger event execution)
      operationId: createEvent
      tags:
        - events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventResponse'
        '400':
          description: Invalid input
  /events/{id}:
    get:
      summary: Read event by ID
      operationId: readEvent
      tags:
        - events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadEventResponse'
        '404':
          description: Event not found
components:
  schemas:
    SaveUserRequest:
      type: object
      required:
        - name
        - surname
        - email
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
          format: email
    SaveUserResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
          format: email
    RetrieveUserRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    RetrieveUserResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
          format: email
    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginUserResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    VerifyUserRequest:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
    VerifyUserResponse:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
          format: email
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string


    # --- Game Schemas ---
    # Asset
    CreateAssetRequest:
      type: object
      required:
        - type
        - name
      properties:
        type:
          $ref: '#/components/schemas/AssetType'
        name:
          type: string
        description:
          type: string
        content:
          type: string
          format: byte
    CreateAssetResponse:
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
    ReadAssetResponse:
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
    Asset:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/AssetType'
        name:
          type: string
        description:
          type: string
        url:
          type: string
        content:
          type: string
          format: byte
        onClickAction:
          $ref: '#/components/schemas/OnClickAction'
    AssetType:
      type: string
      enum: [UNKNOWN, IMAGE, AUDIO, VIDEO, MODEL, BUILDING, WOOD, STONE, HARDWOOD, HARDSTONE, GROUND, DECORATION]

    OnClickAction:
      type: object
      properties:
        actionType:
          $ref: '#/components/schemas/ActionType'
        timerInfo:
          $ref: '#/components/schemas/TimerInfo'
        rewardInfo:
          $ref: '#/components/schemas/RewardInfo'
        energyInfo:
          $ref: '#/components/schemas/EnergyInfo'

    ActionType:
      type: string
      enum: [VOID, START_TIMER, END_TIMER, COLLECT_REWARD, SPEED_UP, FINISH_NOW]

    TimerInfo:
      type: object
      properties:
        durationSeconds:
          type: integer
          format: int64
        timerId:
          type: string

    RewardInfo:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceReward'
        xpGrant:
          type: integer
          format: int32

    ResourceReward:
      type: object
      properties:
        resourceId:
          type: string
        amount:
          type: integer
          format: int32

    EnergyInfo:
      type: object
      properties:
        energyConsumption:
          type: integer
          format: int32

    # Island
    CreateIslandRequest:
      type: object
      required: [userId, variantId, name]
      properties:
        userId:
          type: string
        variantId:
          type: string
        name:
          type: string
    CreateIslandResponse:
      type: object
      properties:
        id:
          type: string
    ReadIslandResponse:
      type: object
      properties:
        island:
          $ref: '#/components/schemas/Island'
    Island:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        ownerId:
          type: string
        namedVariant:
          type: string
        allowedPlayers:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        farm:
          $ref: '#/components/schemas/Farm'
        barn:
          $ref: '#/components/schemas/Barn'
        mines:
          $ref: '#/components/schemas/Mines'
        fishingArea:
          $ref: '#/components/schemas/FishingArea'

    # Island Variant
    IslandVariant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        ownerId:
          type: string
        namedVariant:
          type: string
        farmTemplate:
          $ref: '#/components/schemas/Farm'
        barnTemplate:
          $ref: '#/components/schemas/Barn'
        minesTemplate:
          $ref: '#/components/schemas/Mines'
        fishingAreaTemplate:
          $ref: '#/components/schemas/FishingArea'

    # Farm structures
    Farm:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        blockSize:
          type: integer
          format: int32
        plots:
          type: array
          items:
            $ref: '#/components/schemas/CropPlot'
        decorations:
          type: array
          items:
            $ref: '#/components/schemas/Decoration'

    CropPlot:
      type: object
      properties:
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        asset:
          $ref: '#/components/schemas/Asset'
        cropId:
          type: string
        plantedAt:
          type: string
        growthStage:
          type: integer
          format: int32
        isWatered:
          type: boolean

    Barn:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        blockSize:
          type: integer
          format: int32
        pens:
          type: array
          items:
            $ref: '#/components/schemas/AnimalPen'
        storageUnits:
          type: array
          items:
            $ref: '#/components/schemas/Storage'

    AnimalPen:
      type: object
      properties:
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        asset:
          $ref: '#/components/schemas/Asset'
        animalIds:
          type: array
          items:
            type: string
        capacity:
          type: integer
          format: int32

    Storage:
      type: object
      properties:
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        asset:
          $ref: '#/components/schemas/Asset'
        storageId:
          type: string
        capacity:
          type: integer
          format: int32

    Mines:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        currentLevel:
          type: integer
          format: int32
        maxLevel:
          type: integer
          format: int32
        levels:
          type: array
          items:
            $ref: '#/components/schemas/MineLevel'

    MineLevel:
      type: object
      properties:
        level:
          type: integer
          format: int32
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        blockSize:
          type: integer
          format: int32
        tiles:
          type: array
          items:
            $ref: '#/components/schemas/MineTile'
        resourceIds:
          type: array
          items:
            type: string
        difficulty:
          type: integer
          format: int32

    MineTile:
      type: object
      properties:
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        asset:
          $ref: '#/components/schemas/Asset'
        resourceId:
          type: string
        resourceQuantity:
          type: integer
          format: int32
        discovered:
          type: boolean
        timeTaken:
          type: integer
          format: int32

    FishingArea:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        blockSize:
          type: integer
          format: int32
        spots:
          type: array
          items:
            $ref: '#/components/schemas/FishingSpot'
        availableFishIds:
          type: array
          items:
            type: string

    FishingSpot:
      type: object
      properties:
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        asset:
          $ref: '#/components/schemas/Asset'
        quality:
          type: integer
          format: int32
        specificFishIds:
          type: array
          items:
            type: string

    Decoration:
      type: object
      properties:
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        sizeX:
          type: integer
          format: int32
        sizeY:
          type: integer
          format: int32
        asset:
          $ref: '#/components/schemas/Asset'

    # Events
    CreateEventRequest:
      type: object
      required: [islandId, userId, resourceId, type]
      properties:
        islandId:
          type: string
          description: ID of the island where the event occurs
        userId:
          type: string
          description: ID of the user triggering the event
        resourceId:
          type: string
          description: ID of the resource/asset being interacted with
        type:
          $ref: '#/components/schemas/EventRequestTriggerType'
    CreateEventResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the created event
        completionTimestamp:
          type: string
          format: date-time
          description: Timestamp when the event will complete
    ReadEventResponse:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ScheduledEvent'
    ScheduledEvent:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the event
        createdDate:
          type: string
          format: date-time
          description: When the event was created
        executionDate:
          type: string
          format: date-time
          description: When the event will execute
        islandId:
          type: string
          description: ID of the island
        assetId:
          type: string
          description: ID of the asset/resource
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
          description: Current status of the event
        userId:
          type: string
          description: ID of the user who created the event
    EventRequestTriggerType:
      type: string
      enum: [UNKNOWN_TYPE, MINES_TYPE]
      description: Type of event being triggered
